{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\forms\\\\01-starting-project\\\\01-starting-project\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [formIsValid, setIsFormValid] = useState(false);\n  const {\n    value: enteredName,\n    hasErrors: nameInputHasErrors,\n    // takhle priradime aliasy tem funkcim\n    valueInputChange: nameInputChange,\n    valueInputBlurHandler: nameInputBlurHandler\n  } = useInput(validateNameInput); // nebo: useInput(value => value.trim() !== '')\n\n  function validateNameInput(value) {\n    return value.trim() !== \"\";\n  }\n\n  const {\n    value: enteredEmail,\n    hasErrors: emailInputHasErrors,\n    valueInputChange: emailInputChange,\n    valueInputBlurHandler: emailInputBlurHandler\n  } = useInput(value => value.includes('@'));\n  useEffect(() => {\n    if (!emailInputHasErrors && !nameInputHasErrors) {\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  }, [emailInputHasErrors, nameInputHasErrors]);\n  /*\n  Nebo:\n  let formIsValid = false;\n  if (enteredNameIsValid) {\n    formIsValid=true;\n  }\n  */\n\n  function formSubmission(event) {\n    event.preventDefault();\n    setEnteredNameTouched(true); // predtim nez zcheckneme jestli je to valid.\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false); // resettujeme touched state\n\n    setEnteredEmailTouched(false);\n  }\n\n  const nameInputClasses = nameInputHasErrors ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputHasErrors ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmission,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChange,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChange,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"E=mail must not be empty and must include '@' symbol.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"MbuUHwW2jB7dtNbHvuxADy8BFJo=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n/*\nconst nameInputRef = useRef();\n\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n\nPRED POUZITIM CUSTOM HOOK USEINPUT:\n//const [enteredName, setEnteredName] = useState(\"\");\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // puvodni verze: const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // na zacatku jsme dali enteredNameIsValid true, aby se ten error neukazovalo hned po spusteni.\n  // ale to by mohlo pozdeji zpusobovat chyby. neni to uplne spravne.\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [formIsValid, setIsFormValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // bude to invalid, kdyz uz byla form touchnuta a zaroven je to enteredName invalidni.\n\n  const enteredEmailIsValid =\n    enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\nfunction nameInputChange(event) {\n    setEnteredName(event.target.value);\n  }\n\n  function emailInputChange(event) {\n    setEnteredEmail(event.target.value);\n  }\n\n  function nameInputBlurHandler(event) {\n    setEnteredNameTouched(true);\n  }\n\n  function emailInputBlurHandler(event) {\n    setEnteredEmailTouched(true);\n  }\n  */\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/forms/01-starting-project/01-starting-project/src/components/SimpleInput.js"],"names":["useState","useEffect","useInput","SimpleInput","props","formIsValid","setIsFormValid","value","enteredName","hasErrors","nameInputHasErrors","valueInputChange","nameInputChange","valueInputBlurHandler","nameInputBlurHandler","validateNameInput","trim","enteredEmail","emailInputHasErrors","emailInputChange","emailInputBlurHandler","includes","formSubmission","event","preventDefault","setEnteredNameTouched","enteredNameIsValid","console","log","setEnteredName","setEnteredEmail","setEnteredEmailTouched","nameInputClasses","emailInputClasses","nameInputIsInvalid","emailInputIsInvalid"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const [formIsValid,setIsFormValid]=useState(false);\n\n  const {\n    value: enteredName,\n    hasErrors: nameInputHasErrors, // takhle priradime aliasy tem funkcim\n    valueInputChange: nameInputChange,\n    valueInputBlurHandler: nameInputBlurHandler,\n  } = useInput(validateNameInput); // nebo: useInput(value => value.trim() !== '')\n\n  function validateNameInput(value) {\n    return value.trim() !== \"\";\n  }\n\n  const {\n    value: enteredEmail,\n    hasErrors: emailInputHasErrors,\n    valueInputChange: emailInputChange,\n    valueInputBlurHandler: emailInputBlurHandler,\n  } = useInput(value => value.includes('@')); \n\n  useEffect(() => {\n    if (!emailInputHasErrors && !nameInputHasErrors) {\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  }, [emailInputHasErrors, nameInputHasErrors]);\n\n  /*\n  Nebo:\n  let formIsValid = false;\n  if (enteredNameIsValid) {\n    formIsValid=true;\n  }\n  */\n\n  function formSubmission(event) {\n    event.preventDefault();\n    setEnteredNameTouched(true); // predtim nez zcheckneme jestli je to valid.\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false); // resettujeme touched state\n    setEnteredEmailTouched(false);\n  }\n\n  const nameInputClasses = nameInputHasErrors\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasErrors\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmission}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChange}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your E-mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChange}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">\n            E=mail must not be empty and must include '@' symbol.\n          </p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n/*\nconst nameInputRef = useRef();\n\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n\nPRED POUZITIM CUSTOM HOOK USEINPUT:\n//const [enteredName, setEnteredName] = useState(\"\");\n  //const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // puvodni verze: const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // na zacatku jsme dali enteredNameIsValid true, aby se ten error neukazovalo hned po spusteni.\n  // ale to by mohlo pozdeji zpusobovat chyby. neni to uplne spravne.\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [formIsValid, setIsFormValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // bude to invalid, kdyz uz byla form touchnuta a zaroven je to enteredName invalidni.\n\n  const enteredEmailIsValid =\n    enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\nfunction nameInputChange(event) {\n    setEnteredName(event.target.value);\n  }\n\n  function emailInputChange(event) {\n    setEnteredEmail(event.target.value);\n  }\n\n  function nameInputBlurHandler(event) {\n    setEnteredNameTouched(true);\n  }\n\n  function emailInputBlurHandler(event) {\n    setEnteredEmailTouched(true);\n  }\n  */\n"]},"metadata":{},"sourceType":"module"}