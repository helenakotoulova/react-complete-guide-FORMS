{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\forms\\\\01-starting-project\\\\01-starting-project\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false); // na zacatku jsme dali enteredNameIsValid true, aby se ten error neukazovalo hned po spusteni.\n  // ale to by mohlo pozdeji zpusobovat chyby. neni to uplne spravne.\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  function nameInputChange(event) {\n    setEnteredName(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  }\n\n  function formSubmission(event) {\n    event.preventDefault();\n    setEnteredNameTouched(true); // predtim nez zcheckneme jestli je to valid.\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n  }\n\n  function nameInputBlurHandler(event) {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // bude to invalid, kdyz uz byla form touchnuta a zaroven je to enteredName invalidni.\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmission,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChange,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"E+J08VDKU5xPbhzR5ys5bmcr9/o=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n/*\nconst nameInputRef = useRef();\n\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/forms/01-starting-project/01-starting-project/src/components/SimpleInput.js"],"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","nameInputChange","event","target","value","trim","formSubmission","preventDefault","console","log","nameInputBlurHandler","nameInputIsInvalid","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAE7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D,CAH6B,CAI7B;AACA;;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;;AAEA,WAASS,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BN,IAAAA,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AACA,QAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAlC,EAAsC;AACpCP,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF;;AAED,WAASQ,cAAT,CAAwBJ,KAAxB,EAA+B;AAC7BA,IAAAA,KAAK,CAACK,cAAN;AACAP,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CAF6B,CAEA;;AAC7B,QAAIL,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BP,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AACDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYd,WAAZ;AAED;;AAED,WAASe,oBAAT,CAA8BR,KAA9B,EAAqC;AACnCF,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,WAAW,CAACU,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BP,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF;;AAED,QAAMa,kBAAkB,GAAG,CAACd,kBAAD,IAAuBE,kBAAlD,CAlC6B,CAmC7B;;AAEA,QAAMa,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;AAGA,sBACE;AAAM,IAAA,QAAQ,EAAEL,cAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEM,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEX,eAHZ;AAIE,QAAA,MAAM,EAAES,oBAJV;AAKE,QAAA,KAAK,EAAEf;AALT;AAAA;AAAA;AAAA;AAAA,cAFF,EASGgB,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA5DD;;GAAMlB,W;;KAAAA,W;AA8DN,eAAeA,WAAf;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  \n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // na zacatku jsme dali enteredNameIsValid true, aby se ten error neukazovalo hned po spusteni.\n  // ale to by mohlo pozdeji zpusobovat chyby. neni to uplne spravne.\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  function nameInputChange(event) {\n    setEnteredName(event.target.value);\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  }\n\n  function formSubmission(event) {\n    event.preventDefault();\n    setEnteredNameTouched(true); // predtim nez zcheckneme jestli je to valid.\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    \n  }\n\n  function nameInputBlurHandler(event) {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // bude to invalid, kdyz uz byla form touchnuta a zaroven je to enteredName invalidni.\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmission}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChange}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n/*\nconst nameInputRef = useRef();\n\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n*/\n"]},"metadata":{},"sourceType":"module"}