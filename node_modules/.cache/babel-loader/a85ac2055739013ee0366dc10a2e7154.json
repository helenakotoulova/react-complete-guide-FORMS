{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\forms\\\\01-starting-project\\\\01-starting-project\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\"); // puvodni verze: const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // na zacatku jsme dali enteredNameIsValid true, aby se ten error neukazovalo hned po spusteni.\n  // ale to by mohlo pozdeji zpusobovat chyby. neni to uplne spravne.\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [formIsValid, setIsFormValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // bude to invalid, kdyz uz byla form touchnuta a zaroven je to enteredName invalidni.\n\n  const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  useEffect(() => {\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  }, [enteredNameIsValid, enteredEmailIsValid]);\n  /*\n  Nebo:\n  let formIsValid = false;\n  if (enteredNameIsValid) {\n    formIsValid=true;\n  }\n  */\n\n  function nameInputChange(event) {\n    setEnteredName(event.target.value);\n  }\n\n  function emailInputChange(event) {\n    setEnteredEmail(event.target.value);\n  }\n\n  function nameInputBlurHandler(event) {\n    setEnteredNameTouched(true);\n  }\n\n  function emailInputBlurHandler(event) {\n    setEnteredEmailTouched(true);\n  }\n\n  function formSubmission(event) {\n    event.preventDefault();\n    setEnteredNameTouched(true); // predtim nez zcheckneme jestli je to valid.\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false); // resettujeme touched state\n  }\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmission,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChange,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChange,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"E=mail must not be empty and must include '@' symbol.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"2MmysgdBd/kR5X1N1I5zZ2Ws8Sc=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n/*\nconst nameInputRef = useRef();\n\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/forms/01-starting-project/01-starting-project/src/components/SimpleInput.js"],"names":["useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredEmail","setEnteredEmail","enteredNameTouched","setEnteredNameTouched","enteredEmailTouched","setEnteredEmailTouched","formIsValid","setIsFormValid","enteredNameIsValid","trim","nameInputIsInvalid","enteredEmailIsValid","includes","emailInputIsInvalid","nameInputChange","event","target","value","emailInputChange","nameInputBlurHandler","emailInputBlurHandler","formSubmission","preventDefault","console","log","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // puvodni verze: const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // na zacatku jsme dali enteredNameIsValid true, aby se ten error neukazovalo hned po spusteni.\n  // ale to by mohlo pozdeji zpusobovat chyby. neni to uplne spravne.\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const [formIsValid, setIsFormValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // bude to invalid, kdyz uz byla form touchnuta a zaroven je to enteredName invalidni.\n\n  const enteredEmailIsValid =\n    enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  useEffect(() => {\n    if (enteredNameIsValid && enteredEmailIsValid) {\n      setIsFormValid(true);\n    } else {\n      setIsFormValid(false);\n    }\n  }, [enteredNameIsValid, enteredEmailIsValid]);\n\n  /*\n  Nebo:\n  let formIsValid = false;\n  if (enteredNameIsValid) {\n    formIsValid=true;\n  }\n  */\n\n  function nameInputChange(event) {\n    setEnteredName(event.target.value);\n  }\n\n  function emailInputChange(event) {\n    setEnteredEmail(event.target.value);\n  }\n\n  function nameInputBlurHandler(event) {\n    setEnteredNameTouched(true);\n  }\n\n  function emailInputBlurHandler(event) {\n    setEnteredEmailTouched(true);\n  }\n\n  function formSubmission(event) {\n    event.preventDefault();\n    setEnteredNameTouched(true); // predtim nez zcheckneme jestli je to valid.\n    if (!enteredNameIsValid) {\n      return;\n    }\n    console.log(enteredName);\n    setEnteredName(\"\");\n    setEnteredEmail(\"\");\n    setEnteredNameTouched(false); // resettujeme touched state\n  }\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmission}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChange}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your E-mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChange}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputIsInvalid && (\n          <p className=\"error-text\">\n            E=mail must not be empty and must include '@' symbol.\n          </p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n\n/*\nconst nameInputRef = useRef();\n\nconst enteredValue = nameInputRef.current.value;\nconsole.log(enteredValue);\n*/\n"]},"metadata":{},"sourceType":"module"}