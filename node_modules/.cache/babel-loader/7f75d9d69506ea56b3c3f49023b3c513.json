{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\n\nconst inputReducer = (state, action) => {\n  if (action.type === \"CHANGE\") {\n    return {\n      enteredValue: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === \"BLUR\") {\n    return {\n      enteredValue: state.enteredValue,\n      isTouched: true\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    return {\n      //defaultInputState,\n      enteredValue: '',\n      isTouched: false\n    };\n  }\n\n  return defaultInputState;\n};\n\nconst defaultInputState = {\n  enteredValue: \"\",\n  isTouched: false\n};\n\nfunction useInputMine(validateValue) {\n  _s();\n\n  const [inputState, dispatchInput] = useReducer(inputReducer, defaultInputState);\n\n  function valueInputChangeHandler(event) {\n    dispatchInput({\n      type: \"CHANGE\",\n      value: event.target.value\n    });\n  }\n\n  function valueInputBlurHandler() {\n    dispatchInput({\n      type: \"BLUR\"\n    });\n  }\n\n  function resetInput() {\n    dispatchInput({\n      type: \"RESET\"\n    });\n  }\n\n  const valueIsValid = validateValue(inputState.enteredValue);\n  const inputValueHasErrors = !valueIsValid && inputState.isTouched;\n  return {\n    enteredValue: inputState.enteredValue,\n    valueIsValid,\n    inputValueHasErrors,\n    valueInputChangeHandler,\n    valueInputBlurHandler,\n    resetInput\n  };\n}\n\n_s(useInputMine, \"VpR+g0SPtnEJoRpIu0rP3e1718Q=\");\n\nexport default useInputMine;","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/forms/01-starting-project/01-starting-project/src/hooks/use-input-mine.js"],"names":["useReducer","inputReducer","state","action","type","enteredValue","value","isTouched","defaultInputState","useInputMine","validateValue","inputState","dispatchInput","valueInputChangeHandler","event","target","valueInputBlurHandler","resetInput","valueIsValid","inputValueHasErrors"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAIA,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLC,MAAAA,YAAY,EAAEF,MAAM,CAACG,KADhB;AAELC,MAAAA,SAAS,EAAEL,KAAK,CAACK;AAFZ,KAAP;AAID;;AACD,MAAIJ,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AACLC,MAAAA,YAAY,EAAEH,KAAK,CAACG,YADf;AAELE,MAAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AACD,MAAIJ,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AACL;AACAC,MAAAA,YAAY,EAAE,EAFT;AAGLE,MAAAA,SAAS,EAAE;AAHN,KAAP;AAKD;;AACD,SAAOC,iBAAP;AACD,CArBD;;AAuBA,MAAMA,iBAAiB,GAAG;AAAEH,EAAAA,YAAY,EAAE,EAAhB;AAAoBE,EAAAA,SAAS,EAAE;AAA/B,CAA1B;;AAEA,SAASE,YAAT,CAAsBC,aAAtB,EAAqC;AAAA;;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,UAAU,CAC5CC,YAD4C,EAE5CO,iBAF4C,CAA9C;;AAKA,WAASK,uBAAT,CAAiCC,KAAjC,EAAwC;AACtCF,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE,QAAR;AAAkBE,MAAAA,KAAK,EAAEQ,KAAK,CAACC,MAAN,CAAaT;AAAtC,KAAD,CAAb;AACD;;AAED,WAASU,qBAAT,GAAiC;AAC/BJ,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb;AACD;;AAED,WAASa,UAAT,GAAsB;AACpBL,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb;AACD;;AAED,QAAMc,YAAY,GAAGR,aAAa,CAACC,UAAU,CAACN,YAAZ,CAAlC;AACA,QAAMc,mBAAmB,GAAG,CAACD,YAAD,IAAiBP,UAAU,CAACJ,SAAxD;AAEA,SAAO;AACLF,IAAAA,YAAY,EAAEM,UAAU,CAACN,YADpB;AAELa,IAAAA,YAFK;AAGLC,IAAAA,mBAHK;AAILN,IAAAA,uBAJK;AAKLG,IAAAA,qBALK;AAMLC,IAAAA;AANK,GAAP;AAQD;;GA7BQR,Y;;AA+BT,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  if (action.type === \"CHANGE\") {\r\n    return {\r\n      enteredValue: action.value,\r\n      isTouched: state.isTouched,\r\n    };\r\n  }\r\n  if (action.type === \"BLUR\") {\r\n    return {\r\n      enteredValue: state.enteredValue,\r\n      isTouched: true,\r\n    };\r\n  }\r\n  if (action.type === \"RESET\") {\r\n    return {\r\n      //defaultInputState,\r\n      enteredValue: '',\r\n      isTouched: false,\r\n    };\r\n  }\r\n  return defaultInputState;\r\n};\r\n\r\nconst defaultInputState = { enteredValue: \"\", isTouched: false };\r\n\r\nfunction useInputMine(validateValue) {\r\n  const [inputState, dispatchInput] = useReducer(\r\n    inputReducer,\r\n    defaultInputState\r\n  );\r\n\r\n  function valueInputChangeHandler(event) {\r\n    dispatchInput({ type: \"CHANGE\", value: event.target.value });\r\n  }\r\n\r\n  function valueInputBlurHandler() {\r\n    dispatchInput({ type: \"BLUR\" });\r\n  }\r\n\r\n  function resetInput() {\r\n    dispatchInput({ type: \"RESET\" });\r\n  }\r\n\r\n  const valueIsValid = validateValue(inputState.enteredValue);\r\n  const inputValueHasErrors = !valueIsValid && inputState.isTouched;\r\n\r\n  return {\r\n    enteredValue: inputState.enteredValue,\r\n    valueIsValid,\r\n    inputValueHasErrors,\r\n    valueInputChangeHandler,\r\n    valueInputBlurHandler,\r\n    resetInput,\r\n  };\r\n}\r\n\r\nexport default useInputMine;\r\n"]},"metadata":{},"sourceType":"module"}