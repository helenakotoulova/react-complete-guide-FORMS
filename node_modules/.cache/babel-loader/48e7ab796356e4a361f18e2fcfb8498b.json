{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\n\nconst inputReducer = (state, action) => {\n  if (action.type = \"CHANGE\") {\n    return {\n      enteredValue: action.value,\n      isTouched: state.value\n    };\n  }\n\n  if (action.type = \"BLUR\") {\n    return {\n      enteredValue: state.value,\n      isTouched: true\n    };\n  }\n\n  if (action.type = \"RESET\") {\n    return {\n      defaultInputState\n    };\n  }\n\n  return;\n};\n\nconst defaultInputState = {\n  enteredValue: \"\",\n  isTouched: false\n};\n\nfunction useInputMine(validateValue) {\n  _s();\n\n  const [inputState, dispatchInput] = useReducer(inputReducer, defaultInputState);\n\n  function valueInputChangeHandler(event) {\n    dispatchInput({\n      type: \"CHANGE\",\n      value: event.target.value\n    });\n  }\n\n  function valueInputBlurHandler() {\n    dispatchInput({\n      type: \"BLUR\"\n    });\n  }\n\n  function resetInput() {\n    dispatchInput({\n      type: \"RESET\"\n    });\n  }\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const inputValueHasErrors = !valueIsValid && isTouched;\n\n  function valueInputChangeHandler(event) {\n    setEnteredValue(event.target.value);\n  }\n\n  function valueInputBlurHandler() {\n    setIsTouched(true);\n  }\n\n  function resetInput() {\n    setIsTouched(false);\n    setEnteredValue(\"\");\n  }\n\n  return {\n    enteredValue: enteredValue,\n    valueIsValid,\n    inputValueHasErrors,\n    valueInputChangeHandler,\n    valueInputBlurHandler,\n    resetInput\n  };\n}\n\n_s(useInputMine, \"V+k/c3uEm+DWKCYh9Ka/UVA1jfw=\");\n\nexport default useInputMine;","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/forms/01-starting-project/01-starting-project/src/hooks/use-input-mine.js"],"names":["useReducer","inputReducer","state","action","type","enteredValue","value","isTouched","defaultInputState","useInputMine","validateValue","inputState","dispatchInput","valueInputChangeHandler","event","target","valueInputBlurHandler","resetInput","setEnteredValue","useState","setIsTouched","valueIsValid","inputValueHasErrors"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtC,MAAKA,MAAM,CAACC,IAAP,GAAc,QAAnB,EAA8B;AAC5B,WAAO;AACLC,MAAAA,YAAY,EAAEF,MAAM,CAACG,KADhB;AAELC,MAAAA,SAAS,EAAEL,KAAK,CAACI;AAFZ,KAAP;AAID;;AACD,MAAKH,MAAM,CAACC,IAAP,GAAc,MAAnB,EAA4B;AAC1B,WAAO;AACLC,MAAAA,YAAY,EAAEH,KAAK,CAACI,KADf;AAELC,MAAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AACD,MAAKJ,MAAM,CAACC,IAAP,GAAc,OAAnB,EAA6B;AAC3B,WAAO;AACLI,MAAAA;AADK,KAAP;AAGD;;AACD;AACD,CAnBD;;AAqBA,MAAMA,iBAAiB,GAAG;AAAEH,EAAAA,YAAY,EAAE,EAAhB;AAAoBE,EAAAA,SAAS,EAAE;AAA/B,CAA1B;;AAEA,SAASE,YAAT,CAAsBC,aAAtB,EAAqC;AAAA;;AACnC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,UAAU,CAC5CC,YAD4C,EAE5CO,iBAF4C,CAA9C;;AAKA,WAASK,uBAAT,CAAiCC,KAAjC,EAAwC;AACtCF,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE,QAAR;AAAkBE,MAAAA,KAAK,EAAEQ,KAAK,CAACC,MAAN,CAAaT;AAAtC,KAAD,CAAb;AACD;;AAED,WAASU,qBAAT,GAAiC;AAC/BJ,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb;AACD;;AAED,WAASa,UAAT,GAAsB;AACpBL,IAAAA,aAAa,CAAC;AAAER,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAb;AACD;;AAED,QAAM,CAACC,YAAD,EAAea,eAAf,IAAkCC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACZ,SAAD,EAAYa,YAAZ,IAA4BD,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAME,YAAY,GAAGX,aAAa,CAACL,YAAD,CAAlC;AACA,QAAMiB,mBAAmB,GAAG,CAACD,YAAD,IAAiBd,SAA7C;;AAEA,WAASM,uBAAT,CAAiCC,KAAjC,EAAwC;AACtCI,IAAAA,eAAe,CAACJ,KAAK,CAACC,MAAN,CAAaT,KAAd,CAAf;AACD;;AAED,WAASU,qBAAT,GAAiC;AAC/BI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASH,UAAT,GAAsB;AACpBG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACD;;AAED,SAAO;AACLb,IAAAA,YAAY,EAAEA,YADT;AAELgB,IAAAA,YAFK;AAGLC,IAAAA,mBAHK;AAILT,IAAAA,uBAJK;AAKLG,IAAAA,qBALK;AAMLC,IAAAA;AANK,GAAP;AAQD;;GA7CQR,Y;;AA+CT,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  if ((action.type = \"CHANGE\")) {\r\n    return {\r\n      enteredValue: action.value,\r\n      isTouched: state.value,\r\n    };\r\n  }\r\n  if ((action.type = \"BLUR\")) {\r\n    return {\r\n      enteredValue: state.value,\r\n      isTouched: true,\r\n    };\r\n  }\r\n  if ((action.type = \"RESET\")) {\r\n    return {\r\n      defaultInputState,\r\n    };\r\n  }\r\n  return;\r\n};\r\n\r\nconst defaultInputState = { enteredValue: \"\", isTouched: false };\r\n\r\nfunction useInputMine(validateValue) {\r\n  const [inputState, dispatchInput] = useReducer(\r\n    inputReducer,\r\n    defaultInputState\r\n  );\r\n\r\n  function valueInputChangeHandler(event) {\r\n    dispatchInput({ type: \"CHANGE\", value: event.target.value });\r\n  }\r\n\r\n  function valueInputBlurHandler() {\r\n    dispatchInput({ type: \"BLUR\" });\r\n  }\r\n\r\n  function resetInput() {\r\n    dispatchInput({ type: \"RESET\" });\r\n  }\r\n\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const inputValueHasErrors = !valueIsValid && isTouched;\r\n\r\n  function valueInputChangeHandler(event) {\r\n    setEnteredValue(event.target.value);\r\n  }\r\n\r\n  function valueInputBlurHandler() {\r\n    setIsTouched(true);\r\n  }\r\n\r\n  function resetInput() {\r\n    setIsTouched(false);\r\n    setEnteredValue(\"\");\r\n  }\r\n\r\n  return {\r\n    enteredValue: enteredValue,\r\n    valueIsValid,\r\n    inputValueHasErrors,\r\n    valueInputChangeHandler,\r\n    valueInputBlurHandler,\r\n    resetInput,\r\n  };\r\n}\r\n\r\nexport default useInputMine;\r\n"]},"metadata":{},"sourceType":"module"}